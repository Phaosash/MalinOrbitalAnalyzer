Global Methods
4.1 Create two data structures using the LinkedList<T> class from the C# 
Systems.Collections.Generic namespace. The data must be of type “double”; you are 
not permitted to use any additional classes, nodes, pointers or data structures 
(array, list, etc) in the implementation of this application. The two LinkedLists 
of type double are to be declared as global within the “public partial class”. 

4.2 Copy the Galileo.DLL file into the root directory of your solution folder and 
add the appropriate reference in the solution explorer. Create a method called 
“LoadData” which will populate both LinkedLists. Declare an instance of the Galileo
library in the method and create the appropriate loop construct to populate the two
LinkedList; the data from Sensor A will populate the first LinkedList, while the 
data from Sensor B will populate the second LinkedList. The LinkedList size will be
hardcoded inside the method and must be equal to 400. The input parameters are 
empty, and the return type is void. 

4.3 Create a custom method called “ShowAllSensorData” which will display both 
LinkedLists in a ListView. Add column titles “Sensor A” and “Sensor B” to the 
ListView. The input parameters are empty, and the return type is void. 

4.4 Create a button and associated click method that will call the LoadData and 
ShowAllSensorData methods. The input parameters are empty, and the return type is 
void.

Utility Methods 
4.5 Create a method called “NumberOfNodes” that will return an integer which is the
number of nodes(elements) in a LinkedList. The method signature will have an input
parameter of type LinkedList, and the calling code argument is the linkedlist name.

4.6 Create a method called “DisplayListboxData” that will display the content of a 
LinkedList inside the appropriate ListBox. The method signature will have two input
parameters; a LinkedList, and the ListBox name.  The calling code argument is the 
linkedlist name and the listbox name. 

Sort and Search Methods 
4.7 Create a method called “SelectionSort” which has a single input parameter of 
type LinkedList, while the calling code argument is the linkedlist name. The method
code must follow the pseudo code supplied below in the Appendix. The return type 
is Boolean. 

4.8 Create a method called “InsertionSort” which has a single parameter of type 
LinkedList, while the calling code argument is the linkedlist name. The method code
must follow the pseudo code supplied below in the Appendix. The return type is 
Boolean. 

4.9 Create a method called “BinarySearchIterative” which has the following four 
parameters: LinkedList, SearchValue, Minimum and Maximum. This method will return 
an integer of the linkedlist element from a successful search or the nearest 
neighbour value. The calling code argument is the linkedlist name, search value, 
minimum list size and the number of nodes in the list. The method code must follow 
the pseudo code supplied below in the Appendix. 

4.10 Create a method called “BinarySearchRecursive” which has the following four 
parameters: LinkedList, SearchValue, Minimum and Maximum. This method will return 
an integer of the linkedlist element from a successful search or the nearest 
neighbour value. The calling code argument is the linkedlist name, search value, 
minimum list size and the number of nodes in the list. The method code must follow 
the pseudo code supplied below in the Appendix. 

UI Button Methods
4.11 Create button click methods that will search the LinkedList for an integer 
value entered into a textbox on the form. The four methods are:
	Method for Sensr A and Binary Search Iterative 
	Method for Sensor A and Binary Search Recursive 
	Method for Sensor B and Binary Search Iterative 
	Method for Sensor B and Binary Search Recursive 

	The search code must check to ensure the data is sorted, then start a stopwatch
	before calling the search method. Once the search is complete the stopwatch 
	will stop, and the number of ticks will be displayed in a read only textbox. 
	Finally, the code/method will call the “DisplayListboxData” method and 
	highlight the search target number and two values on each side. 

4.12 Create button click methods that will sort the LinkedList using the Selection
and Insertion methods. The four methods are: 
	Method for Sensor A and Selection Sort 
	Method for Sensor A and Insertion Sort 
	Method for Sensor B and Selection Sort 
	Method for Sensor B and Insertion Sort 

	The button method must start a stopwatch before calling the sort method. Once 
	the sort is complete the stopwatch will stop, and the number of milliseconds 
	will be displayed in a read only textbox. Finally, the code/method will call 
	the “ShowAllSensorData” method and “DisplayListboxData” for the appropriate 
	sensor. 

4.13 Add numeric input controls for Sigma and Mu. The value for Sigma must be 
limited with a minimum of 10 and a maximum of 20. Set the default value to 10. The 
value for Mu must be limited with a minimum of 35 and a maximum of 75. Set the 
default value to 50. 

4.14 Add textboxes for the search value; one for each sensor, ensure only numeric 
integer values can be entered. 

4.15 All code is required to be adequately commented. Map the programming criteria 
and features to your code/methods by adding comments/regions above the method 
signatures. Ensure your code is compliant with the CITEMS coding standards. 